import store from '@/vuex'
import Firebase from 'firebase'
import appconfig from '@/appconfig'

// 初始化 Firebase
export const FirebaseApp = Firebase.initializeApp(appconfig.firebase_config)

// 以 VueFire 操作 database
export let VueFireDB = FirebaseApp.database()

// 監控登入狀態的變化，隨時更新 Vuex 中的數據
Firebase.auth().onAuthStateChanged(firebaseUser => {
  if (firebaseUser) {
    console.log('[firebase.js] 使用者登入了: ', firebaseUser.email, firebaseUser.uid)

    // TODO: 改到Signup.vue處理了！
    // 將使用者資料更新入 Firebase Databse
    // Firebase.database().ref('users/' + firebaseUser.uid).set({
    //   username: firebaseUser.displayName,
    //   email: firebaseUser.email,
    //   profile_picture: firebaseUser.photoURL
    // })

    // TODO: startDatabaseQueries()

    // 將使用者資料寫入 Vuex
    store.commit('setUser', firebaseUser)
  } else {
    console.log('[firebase.js] 使用者登出了', firebaseUser)
    store.commit('clearUser', firebaseUser)
  }
})

// Deprecated，建議直接用vuex裡的isLogin
// export let currentUser = Firebase.auth().currentUser

export const firebaseAuth = {

  // Email 登入
  signinWithEmail (email, pwd) {
    const promise = Firebase.auth().signInWithEmailAndPassword(email, pwd)
    store.commit('setWarning', null)
    promise.catch((err) => {
      // 登入錯誤處理
      console.log('[Signup.vue] 登入出錯了：', email, pwd, err)
      switch (err.code) {
        case 'auth/wrong-password': store.commit('setWarning', '抱歉，您提供的email或密碼不正確。'); break
        case 'auth/invalid-email': store.commit('setWarning', '抱歉，您提供的email無效，請填入有效的email。'); break
        case 'auth/user-disabled': store.commit('setWarning', '抱歉，您的帳號已被暫時停用，請聯絡 lawrencechou1024「AT」gmail.com '); break
        case 'auth/user-not-found': store.commit('setWarning', '抱歉，資料庫中並沒有使用者紀錄，請先註冊。'); break
        default:
          store.commit('setWanring', err + '登入發生未預期的錯誤，懇請協助通知 lawrencechou1024「AT」gmail.com 幫助我們馬上修正')
          // console.log(err + '登入發生未預期的錯誤，懇請協助通知 lawrencechou1024「AT」gmail.com 幫助我們馬上修正')
          alert(err + '登入發生未預期的錯誤，懇請協助通知 lawrencechou1024「AT」gmail.com 幫助我們馬上修正') // TODO: dev only
      }
    })
  },

  // Email 註冊
  signupWithEmail (email, pwd) {
    const promise = Firebase.auth().createUserWithEmailAndPassword(email, pwd)
    store.commit('setWarning', null)
    promise.catch((err) => {
      // 登入錯誤處理
      console.log('[Signup.vue] 註冊出錯了：', err)
      switch (err.code) {
        case 'auth/email-already-in-use': store.commit('setWarningMsg', '此Email帳號已註冊，若須重設密碼請點選右下角的「登入遇到問題？」。'); break
        case 'auth/invalid-email': store.commit('setWarningMsg', '抱歉，您提供的email無效，請填入有效的email。'); break
        case 'auth/operation-not-allowed': store.commit('setWarningMsg', 'Email註冊服務已終止。'); break
        case 'auth/weak-password': store.commit('setWarningMsg', '密碼強度過低，請嘗試更複雜的密碼。'); break
        default:
          store.commit('setWanring', err + '登入發生未預期的錯誤，懇請協助通知 lawrencechou1024「AT」gmail.com 幫助我們馬上修正')
          // console.log(err + '登入發生未預期的錯誤，懇請協助通知 lawrencechou1024「AT」gmail.com 幫助我們馬上修正')
          alert(err + '登入發生未預期的錯誤，懇請協助通知 lawrencechou1024「AT」gmail.com 幫助我們馬上修正') // TODO: dev only
      }
    })
  },

  // Google 登入
  signinWithGoogle () {
    let provider = new Firebase.auth.GoogleAuthProvider()
    // provider.addScope('https://www.googleapis.com/auth/plus.login')  // Know the list of people in your circles, your age range, and language
    // provider.addScope('https://www.googleapis.com/auth/plus.me')  //  Know who you are on Google
    provider.addScope('https://www.googleapis.com/auth/userinfo.email')  //  View your email address
    provider.addScope('https://www.googleapis.com/auth/userinfo.profile')  //  View your basic profile info
    let promise = Firebase.auth().signInWithPopup(provider)
    // Promise 回傳 non-null firebase.auth.UserCredential {user: nullable firebase.User, credential: nullable firebase.auth.AuthCredential, operationType: (nullable string or undefined), additionalUserInfo: (nullable firebase.auth.AdditionalUserInfo or undefined)}
    promise.then((UserCredential) => {
      console.log('[firebase.js] Google登入成功: ', UserCredential)
    }).catch((err) => {
      alert('[firebase.js] Google登入錯誤: ', err.code, err.message) // TODO: dev only
      console.log('[firebase.js] Google登入錯誤: ', err.code, err.message)
    })
  },

  // 登出
  signOut () {
    // Return `non-null firebase.Promise containing void`
    Firebase.auth().signOut().then(() => {
      console.log('[firebase.js] signOut()成功')
    }).catch((e) => { console.log('[newProjectForm]', e) })
  }
}

/**
* Saves a new post to the Firebase DB.
* Return: non-null firebase.Promise containing void, Resolves when update on server is complete.
*/
// [START write_fan_out]
let writeNewPost = function (uid, email, picture, postObj) {
  let postData = postObj
  postData['uid'] = uid
  postData['author'] = email
  postData['authorPic'] = picture
  postData['starCount'] = 0

  // Get a key for a new Post.
  var newPostKey = Firebase.database().ref().child('posts').push().key

  // Write the new post's data simultaneously in the posts list and the user's post list.
  var updates = {}
  updates['/posts/' + newPostKey] = postData
  updates['/user-posts/' + uid + '/' + newPostKey] = postData
  let postPromise = Firebase.database().ref().update(updates)
  let postResult = [postPromise, newPostKey]
  return postResult
}

/**
* Creates a new post for the current user.
* Return：writeNewPost 中 update() 所回傳的 promise（成功寫入後resolve出void）
*/
let newPostForCurrentUser = function (postObj) {
  // [START single_value_read]
  var userId = Firebase.auth().currentUser.uid // TODO: 需要檢查是否已登入？
  return Firebase.database().ref('/users/' + userId).once('value').then(function (snapshot) {
    // [START_EXCLUDE]
    let u = Firebase.auth().currentUser
    return writeNewPost(u.uid, u.email, u.photoURL, postObj)
      // [END_EXCLUDE]
  }).catch((e) => { console.log('[newProjectForm]', e) })
  // [END single_value_read]
}

export const firebaseDB = {
  newPostForCurrentUser: newPostForCurrentUser
}
